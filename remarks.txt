---------------------------------------
SQL select example

    create table xx_store(
     xhash   varchar2(20),
     xdata varchar2(2000)
    );

    create table xx_server(
     xname   varchar2(20),
     xactive varchar2(1)
    );

    create table xx_rep(
     xhash varchar2(20),
     xname varchar2(20)
    );

    select * from xx_store
    where xhash in
    (select s.xhash
      from xx_store s
           join xx_rep r on s.xhash=r.xhash
           join xx_server sr on r.xname=sr.xname
     where sr.xactive='Y'
    group by s.xhash
    having count(*)<4)

    insert into xx_server values ('A','Y');
    insert into xx_server values ('B','Y');
    insert into xx_server values ('C','Y');

    insert into xx_store values ('SA','SA');
    insert into xx_store values ('SB','SB');
    insert into xx_store values ('SC','SC');

    insert into xx_rep values ('SA','A');
    insert into xx_rep values ('SA','B');
    insert into xx_rep values ('SB','A');
    insert into xx_rep values ('SB','B');
    insert into xx_rep values ('SB','C');
    insert into xx_rep values ('SC','B');
    insert into xx_rep values ('SC','C');


---------------------------------------
create "lib" for http interaction, to simplify client application
    - handle http connection
    - buffering
    ...

---------------------------------------
Modules/commands

    record (process):
        - input from: UDP, multicast, stdin
        - independant startup with recorder Id
        - all configuration from command line
        - memory buffering
        - local store (append data to dump file) as a fallback
          in case of no connection to the server.
          In case of long term server unavailability, restore database from
          this dump file.
          Have an alarm if the dump file is present.
          Append only to this dump file, so it can be (log)rotated externally.

    serve (process)
        - http interface
        - check web app framework
        - check wai package (minimal example)
        - http://engineering.silk.co/post/90354057868/announcing-rest-a-haskell-rest-framework
        - http://silkapp.github.io/rest/tutorial.html
        - is able to start from command line (fallback and testing)
        - is able to start via pacemaker, same IP, HA, load sharing
        - is able to read (respect) cluster configuration (eg. consul, zookeeper)

    housekeep:
        - cleanup old events
        - maintain replicas

    join:
        - join same recording from multiple servers (same chanel)
          into the same track, to save space

    archive:
        - GUI or command line
        - dump and restore
        - set permanent archives (do not delete these time intervals)
            name1: (startUtc, endUtc, AllChanel | Chanels [<ch>,...])
            name2: ...
            (this goes to database)
        - backup

    replay:
        - GUI or command line
        - is able to use dump file or http (server)
        - chanel selection for replay
        - replay sessions (saved on disk, maybe saved to database??)
        - possibility to attach filters on replay (eg. restamp inside asterix)
        - rate of replay
        - gui slide time, view rate of events on time graph

    check:
        - recalculate hashes

---------------------------------------
Dump file format
    - one JSON encoded event per line

